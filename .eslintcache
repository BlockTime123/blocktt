[{"/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/index.tsx":"1","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/AppContainer.tsx":"2","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/App.tsx":"3","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/utils/txSuccess.js":"4","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/utils/txFail.js":"5","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/wallet/connectors.ts":"6","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/wallet/hooks.ts":"7","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/StatBar.tsx":"8","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/components/Spinner.tsx":"9","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/sprites/index.js":"10"},{"size":197,"mtime":1651162622000,"results":"11","hashOfConfig":"12"},{"size":443,"mtime":1649592657000,"results":"13","hashOfConfig":"12"},{"size":91126,"mtime":1655398315636,"results":"14","hashOfConfig":"12"},{"size":395,"mtime":1649592657000,"results":"15","hashOfConfig":"12"},{"size":365,"mtime":1649592657000,"results":"16","hashOfConfig":"12"},{"size":215,"mtime":1649592657000,"results":"17","hashOfConfig":"12"},{"size":2516,"mtime":1651161116000,"results":"18","hashOfConfig":"12"},{"size":249,"mtime":1650596337000,"results":"19","hashOfConfig":"12"},{"size":781,"mtime":1649592657000,"results":"20","hashOfConfig":"12"},{"size":7259,"mtime":1651219084000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1nczl9a",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/index.tsx",[],["47","48"],"/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/AppContainer.tsx",["49"],"import React from 'react'\nimport { Web3ReactProvider } from '@web3-react/core'\nimport App from './App'\nimport { Web3Provider } from '@ethersproject/providers'\n\nfunction getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function () {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  )\n}\n","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/App.tsx",["50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97"],"import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Tab, Tabs } from 'react-bootstrap'\nimport StatBar from './StatBar'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { Spinner } from './components/Spinner'\n\n// Library to work with Ethereum like blockchain\nimport { injected } from './wallet/connectors'\nimport { useEagerConnect, useInactiveListener } from './wallet/hooks'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { Contract } from '@ethersproject/contracts'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatUnits, parseEther, formatEther } from '@ethersproject/units'\n\n// abis\nimport contrInterface from './interface.json' // Load contract json file\nimport erc20Interface from './erc20Interface.json' // Load erc20 contract json file\nimport nftInterface from './project.nft.abi.json'\n\n// Load all the background images for the 10 different Cryptomon types\nimport bg0 from './sprites-copy/background/0.png'\nimport bg1 from './sprites-copy/background/1.png'\nimport bg2 from './sprites-copy/background/2.png'\nimport bg3 from './sprites-copy/background/3.png'\nimport bg4 from './sprites-copy/background/4.png'\nimport bg5 from './sprites-copy/background/5.png'\nimport bg6 from './sprites-copy/background/6.png'\nimport bg7 from './sprites-copy/background/7.png'\nimport bg8 from './sprites-copy/background/8.png'\nimport bg9 from './sprites-copy/background/9.png'\nimport bg10 from './sprites-copy/background/10.png'\n\nimport MonImages from './sprites'\n\n// util\nimport { showThrottleMessage, Web3Provider } from '@ethersproject/providers'\nimport txSuccess from './utils/txSuccess'\nimport txFail from './utils/txFail'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { receiveMessageOnPort } from 'worker_threads'\nimport { monitorEventLoopDelay } from 'perf_hooks'\nimport { read } from 'fs'\nimport { userInfo } from 'os'\n\n\nenum ConnectorNames {\n  Injected = 'Injected',\n}\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n}\n//bsc cryptomon 0x7bBa695f46feD048ea89CD7FfB4A8eC592b77724\n//bsc token 0xCAE3fEAD6134d1F09dcf2688F8Cbc9dA88912f57\nconst CONTRACT_ADDRESS = '0x7bBa695f46feD048ea89CD7FfB4A8eC592b77724' //CRYPTOMON\nconst ERC20_CONTRACT_ADDRESS2 = '0x55d398326f99059fF775485246999027B3197955' //usdt\nconst ERC20_CONTRACT_ADDRESS = '0xCAE3fEAD6134d1F09dcf2688F8Cbc9dA88912f57' //token\nconst ERC1155_CONTRACT_ADDRESS = '0xf4C7A8BE34525B0BeCf41F0e308170CaE93cfa01' //ITEM\nconst deadaddress = '0x000000000000000000000000000000000000dEaD'\n\n\n// Add background images in an array for easy access\nconst bg = [bg0, bg1, bg2, bg3, bg4, bg5, bg6, bg7, bg8, bg9, bg10]\n\n// Add all 151 Cryptomon names in an array\nconst names = [\n  'Dryad',\n  'Hamadryad',\n  'Leshy',\n  'Santelmo',\n  'Cerberus',\n  'Efreet',\n  'Fastitocalon',\n  'Aspidochelone',\n  'Zaratan',\n  'Arachne',\n  'Jorogumo',\n  'Tsuchigumo',\n  'Pabilsag',\n  'Girtablilu',\n  'Selket',\n  'Tsikavats',\n  'Munnin',\n  'Huginn',\n  'Azeban',\n  'Ratatoskr',\n  'Stratim',\n  'Navka',\n  'Apep',\n  'Nidhoggr',\n  'Raiju',\n  'Raijin',\n  'Amphivena',\n  'Basilisk',\n  'Wolpertinger',\n  'Ramidreju',\n  'Echinemon',\n  'Mujina',\n  'Kamaitachi',\n  'Lavellan',\n  'Vila',\n  'Huldra',\n  'Chimera',\n  'Kyuubi',\n  'Nixie',\n  'Tuathan',\n  'Minyades',\n  'Camazotz',\n  'Curupira',\n  'Penghou',\n  'Ghillie_Dhu',\n  'Myrmecoleon',\n  'Myrmidon',\n  'Mothman',\n  'Moth_King',\n  'Grootslang',\n  'Yaoguai',\n  'Cait_Sidhe',\n  'Cath_Balug',\n  'Nakki',\n  'Kappa',\n  'Satori',\n  'Shojo',\n  'Skohl',\n  'Haet',\n  'Vodyanoy',\n  'Undine',\n  'Melusine',\n  'Vukodlak',\n  'Chernobog',\n  'Djinn',\n  'Bauk',\n  'Troll',\n  'Jotun',\n  'Spriggan',\n  'Jubokko',\n  'Kodama',\n  'Bukavak',\n  'Kraken',\n  'Clayboy',\n  'Met',\n  'Emet',\n  'Sleipnir',\n  'Todorats',\n  'Scylla',\n  'Charybdis',\n  'Brontes',\n  'Arges',\n  'Hraesvelgr',\n  'Berunda',\n  'Cockatrice',\n  'Selkie',\n  'Rusalka',\n  'Tarasque',\n  'Meretseger',\n  'Carbuncle',\n  'Shen',\n  'Boogeyman',\n  'Banshee',\n  'Mare',\n  'Dilong',\n  'Incubus',\n  'Succubus',\n  'Cancer',\n  'Karkinos',\n  'Druk',\n  'Shenlong',\n  'Gan_Ceann',\n  'Oni',\n  'Tairanohone',\n  'Gashadokuro',\n  'Yeren',\n  'Yeti',\n  'Yowie',\n  'Nezhit',\n  'Chuma',\n  'Sigbin',\n  'Gargoyle',\n  'Caladrius',\n  'Umibozu',\n  'Callisto',\n  'Kelpie',\n  'Makara',\n  'Morgen',\n  'Merrow',\n  'Naiad',\n  'Nereid',\n  'Pixiu',\n  'Khepri',\n  'Likho',\n  'kitsune',\n  'Caorthannach',\n  'Kaggen',\n  'Audumbla',\n  'Lochness',\n  'Jormungandr',\n  'Leviathan',\n  'Doppelganger',\n  'Skvader',\n  'Fossegrim',\n  'Valkyrie',\n  'Basan',\n  'Tsukumogami',\n  'Luska',\n  'Hydra',\n  'Afanc',\n  'Cetus',\n  'Vedfolnir',\n  'Baku',\n  'Alkonost',\n  'Quetzalcoatl',\n  'Anzu',\n  'Zmey',\n  'Azhdaya',\n  'Fafnir',\n  'Baba_Yaga',\n  'Baba_Roga',\n]\n\nasync function getMons(_library, _account) {\n  const contr = new Contract(CONTRACT_ADDRESS, contrInterface, _library.getSigner(_account))\n  const totalMons = parseInt(await contr.totalMons())\n  return Promise.all([...Array(totalMons).keys()].map((id) => contr.mons(id)))\n}\n\nasync function approve(_library, _account, _amount) {\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS, erc20Interface, _library.getSigner(_account))\n  const newAmount = `${parseEther(_amount)}`\n  return await erc20Contr.approve(CONTRACT_ADDRESS, newAmount)\n}\n\nasync function approve2(_library, _account, _amount) {\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS2, erc20Interface, _library.getSigner(_account))\n  const newAmount = `${parseEther(_amount)}`\n  return await erc20Contr.approve(CONTRACT_ADDRESS, newAmount)\n}\n\n\n\nasync function setApprovalForAll(_library, _account, _amount) {\n  const nftContr = new Contract(ERC1155_CONTRACT_ADDRESS, nftInterface, _library.getSigner(_account))\n  const newAmount = `${parseEther(_amount)}`\n  return await nftContr.setApprovalForAll(CONTRACT_ADDRESS, newAmount)\n}\n\nfunction Account() {\n  const { account } = useWeb3React()\n  return (\n    <span>\n      {account === null ? '-' : account ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}` : ''}\n    </span>\n  )\n}\n\nasync function getTokenBalance(_library, _account) {\n  if (!_library || !_account) {\n    return\n  }\n  const erc20Contr = new Contract(ERC20_CONTRACT_ADDRESS, erc20Interface, _library.getSigner(_account))\n  const bal = await erc20Contr.balanceOf(_account)\n  return formatEther(BigNumber.from(bal?._hex).toBigInt())\n}\n\nfunction getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (error instanceof UserRejectedRequestErrorInjected) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nfunction App() {\n  const [cryptomons, setCryptomons] = useState([])\n  const [myCryptomons, setMyCryptomons] = useState([])\n  const [otherCryptomons, setOtherCryptomons] = useState([])\n  const [value, setValue] = useState(0) // Used in My Cryptomons tab for input in price text\n  // Used in breeding tab\n  const [breedChoice1, setBreedChoice1] = useState(null)\n  const [breedChoice2, setBreedChoice2] = useState(null)\n  // Used in fighting tab\n  const [fightChoice1, setFightChoice1] = useState(null)\n  const [fightChoice2, setFightChoice2] = useState(null)\n  const [winner, setWinner] = useState(null) // Used to display winner of the last fight\n  const [rounds, setRounds] = useState(null) // Used to display number of rounds the fight lasted\n  const [shareId, setShareId] = useState('') // Used in shareId form input field\n  const [shareAddress, setShareAddress] = useState('') // Used in shareAddress form input field\n  const [renameId, setRenameId] = useState('') // Used in shareId form input field\n  const [yourName, setYourName] = useState('') // used for name input\n  const [tokenBalance, setTokenBalance] = useState('0')\n  const [fightTxDone, setFightTxDone] = useState(false)\n  const [rewards, setRewards] = useState(0)\n  const [healingPotions, setHealingPotions] = useState(null)\n  const [manaPotions, setManaPotions] = useState(null)\n  const [magicPotions, setMagicPotions] = useState(null)\n  const [swords, setSwords] = useState(null)\n  const [shields, setShields] = useState(null)\n  const [disableFightBtn, setDisableFightBtn] = useState(false)\n  const [buyItemAmount, setBuyItemAmount] = useState('')\n  const [buysingleAmount, setBuySingleAmount] = useState('')\n  const [buydoubleAmount, setBuyDoubleAmount] = useState('')\n\n  const [InvitationCode, setInvitationCode] = useState('')\n\n  const [buyZhuangAmount, setBuyZhuangAmount] = useState('')\n  const [buyXiangAmount, setBuyXiangAmount] = useState('')\n  const [buyHeAmount, setBuyHeAmount] = useState('')\n\n  const [buyBigAmount, setBuybigAmount] = useState('')\n  const [buySmallAmount, setBuySmallAmount] = useState('')\n\n  const [CashOuteAmount, setCashOutAmount] = useState('')\n  const [luckyamount, setLuckyAmount] = useState('')\n  const [burnAmount, setBurnAmount] = useState('0')\n  const [disableBuyItemBtn, setDisableBuyItem] = useState(false)\n  const [isShareLoading, setIsShareLoading] = useState(false)\n  const [isBreedMonLoading, setIsBreedMonLoading] = useState(false)\n  const [isBuyMonLoading, setIsBuyMonLoading] = useState(false)\n  const [isAddForSaleLoading, setIsAddForSaleLoading] = useState(false)\n  const [isRemoveFromSaleLoading, setIsRemoveFromSaleLoading] = useState(false)\n  const context = useWeb3React<Web3Provider>()\n  const { connector, account, library, activate, deactivate, active, error } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState<any>()\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n\n    refreshMons()\n  }, [activatingConnector, connector])\n\n  // Get token balance of user\n  useEffect(() => {\n    let mounted = true\n\n    getTokenBalance(library, account).then((res) => {\n      if (mounted) {\n        setTokenBalance(res)\n        refreshMons()\n      }\n    })\n\n    return () => {\n      mounted = false\n    }\n  }, [account, library, disableBuyItemBtn, disableFightBtn])\n\n  // Get contract events\n  useEffect(() => {\n    if (!library || !account) {\n      return\n    }\n\n    let mounted = true\n\n    ;(async function fightResults() {\n      const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n\n      contr.on('FightResults', (_winnerId, _round) => {\n        if (mounted) {\n          const winId = BigNumber.from(_winnerId._hex).toNumber()\n          const round = BigNumber.from(_round._hex).toNumber()\n          setWinner(winId)\n          setRounds(round)\n          refreshMons()\n          setDisableFightBtn(false)\n        }\n      })\n\n      contr.on('Rewards', (_winnerId, _rewards) => {\n        if (mounted) {\n          const rewards = BigNumber.from(_rewards._hex).toNumber()\n          setRewards(rewards)\n          refreshMons()\n          setDisableFightBtn(false)\n        }\n      })\n\n    })()\n\n    return () => {\n      const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n      contr.off('FightResults', (_winnerId, _round) => {\n        setDisableFightBtn(false)\n      })\n      contr.off('Rewards', (_winnerId, _round) => {\n        setDisableFightBtn(false)\n      })\n\n      mounted = false\n    }\n  }, [account, library, fightTxDone])\n\n  // Get items from nft contract\n  useEffect(() => {\n    if (!library || !account) {\n      return\n    }\n\n    let mounted = true\n\n    ;(async function () {\n      if (mounted) {\n        const nftContr = new Contract(ERC1155_CONTRACT_ADDRESS, nftInterface, library.getSigner(account))\n        const healpot = await nftContr.balanceOf(account, 0)\n        const manapot = await nftContr.balanceOf(account, 1)\n        const magicpot = await nftContr.balanceOf(account, 2)\n        const _swords = await nftContr.balanceOf(account, 3)\n        const _shields = await nftContr.balanceOf(account, 4)\n\n        setHealingPotions(BigNumber.from(healpot._hex).toBigInt())\n        setManaPotions(BigNumber.from(manapot._hex).toBigInt())\n        setMagicPotions(BigNumber.from(magicpot._hex).toBigInt())\n        setSwords(BigNumber.from(_swords._hex).toBigInt())\n        setShields(BigNumber.from(_shields._hex).toBigInt())\n      }\n    })()\n\n    return () => {\n      mounted = false\n    }\n  }, [library, account, disableBuyItemBtn])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector )\n\n  // Change the list of created Crypromons saved in the state so UI refreshes after this call\n  async function refreshMons() {\n    if (!library || !account) return\n    await getMons(library, account)\n      .then((_mons) => {\n        // map result\n        const monsMap = _mons.map((mon) => ({\n          atk: mon.atk,\n          def: mon.def,\n          evolve: mon.evolve,\n          forSale: mon.forSale,\n          hp: mon.hp,\n          id: BigNumber.from(mon.id._hex).toNumber(),\n          monType: mon.monType,\n          owner: mon.owner,\n          price: BigNumber.from(mon.price._hex).toBigInt(),\n          // sharedTo: mon.sharedTo,\n          species: mon.species,\n          Name: mon.Name,\n          lv: BigNumber.from(mon.lv._hex).toNumber(),\n          rewardpool: mon.rewardpool,\n          mp: mon.atk + mon.hp + mon.def,\n        }))\n        setCryptomons(monsMap)\n        setMyCryptomons(monsMap.filter((mon) => mon.owner === account))\n        setOtherCryptomons(monsMap.filter((mon) => mon.owner !== account))\n      })\n      .catch((err) => toast.error(err))\n  }\n\n  async function getUsers(_library, _account) {\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, _library.getSigner(_account))\n    const totalMons = parseInt(await contr.totalMons())\n  return Promise.all([...Array(totalMons).keys()].map((id) => contr.mons(id)))\n  }\n\n  async function refreshUser() {\n    if (!library || !account) return\n    await getUsers(library, account)\n      .then((_mons) => {\n        // map result\n        const monsMap = _mons.map((user) => ({\n          \n          lv: BigNumber.from(user.lv._hex).toNumber(),\n        \n        }))\n        setCryptomons(monsMap)\n       \n      })\n      .catch((err) => toast.error(err))\n  }\n\n  // Function that buys a Cryptomon through a smart contract function\n  async function buyMon(id, price) {\n    setIsBuyMonLoading(true)\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const amount = '1'\n    const _price = parseEther(amount)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    \n    approve(library, account, priceInWei)\n    .then(async (results) => {\n      \n\n    const tx = await contr.buyMon(id, overrides).catch((err) => setIsBuyMonLoading(false))\n    const recpt = await tx?.wait()\n    txSuccess(recpt, toast, refreshMons, (loadVal: boolean) => setIsBuyMonLoading(loadVal))\n    txFail(recpt, toast, (loadVal: boolean) => setIsBuyMonLoading(loadVal))\n  } \n    )}\n\n  async function BuyBig(Betamount: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _amount = parseEther(Betamount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.BuyBig(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function BuySmall(amount: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.BuySmall(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function BuySingle(Betamount: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _amount = parseEther(Betamount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.BuySingle(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function BuyDouble(amount: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.BuyDouble(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function BuyZhuang(amount: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.BuyZhuang(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function BuyXiang(amount: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.BuyXiang(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function BuyHe(amount: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.BuyHe(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function LuckyNumber(Number, Betamount: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _amount = parseEther(Betamount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n \n      approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.LuckyNumber(Number,amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function Registry() {\n    let overrides = {\n      gasLimit: 120000,\n    }\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.Registry( overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n\n  }\n\n  async function RegistryWithInvitor(address: string) {\n    let overrides = {\n      gasLimit: 120000,\n    }\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.RegistryWithInvitor(address, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n\n  }\n\n  async function AddCredit(amount) {\n    let overrides = {\n      gasLimit: 1200000,\n    }\n    \n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve2(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.AddCredit(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n          // toast.success(`恭喜💐上分成功，请刷新页面查看余额`)\n          toast.success(<div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n          恭喜💐上分成功，请刷新页面查看余额\n        </div>)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  async function Cashout(amount) {\n    let overrides = {\n      gasLimit: 1200000,\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.Cashout(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n          toast.success(<div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n          下分申请成功，系统将于24小时内审核完成\n        </div>)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  // Function that adds a Cryptomon for sale through a smart contract function\n  async function addForSale(id, price) {\n    setIsAddForSaleLoading(true)\n    if (price === 0 || price === '0') {\n      toast.error('🦄 Price is 0')\n      return\n    }\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const tx = await contr.addForSale(id, parseEther(price), overrides).catch((err) => setIsAddForSaleLoading(false))\n    const receipt = await tx?.wait()\n    if (receipt && receipt.status === 1) {\n      toast.success(`Success, Tx hash: ${receipt.transactionHash}`)\n      refreshMons()\n      setIsAddForSaleLoading(false)\n    }\n    if (receipt && receipt.status === 0) {\n      toast.error(`Error, Tx hash: ${receipt.transactionHash}`)\n      setIsAddForSaleLoading(false)\n    }\n  }\n\n  // Function that removes a Cryptomon from sale through a smart contract function\n  async function removeFromSale(id) {\n    setIsRemoveFromSaleLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.removeFromSale(id, overrides).catch((err) => setIsRemoveFromSaleLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status === 1) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsRemoveFromSaleLoading(false)\n    }\n    if (recpt && recpt.status === 0) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsRemoveFromSaleLoading(false)\n    }\n  }\n\n  // Function that breeds 2 Cryptomons through a smart contract function\n  async function breedMons(id1, id2) {\n    setIsBreedMonLoading(true)\n\n    const price = '1'\n    const _price = parseEther(price)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    // approve(library, account, priceInWei)\n\n    const tx = await contr.breedMons(id1, id2).catch((err) => setIsBreedMonLoading(false))\n    const recpt = await tx?.wait()\n    try {\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      setIsBreedMonLoading(false)\n    }\n\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsBreedMonLoading(false)\n    } \n    } catch (error) {\n      toast.error(`Merge function error: ${error.data?.message || ''}`)\n      setDisableFightBtn(false)\n    }\n    \n     \n    await refreshMons()\n     \n}\n\n  // Function that allows 2 Cryptomons to fight through a smart contract function\n  async function fight(id1, id2) {\n    setDisableFightBtn(true)\n    if (id1 === null || id2 === null) {\n      return setDisableFightBtn(false)\n    }\n\n    let overrides = {\n      gasLimit: 300000,\n    }\n    const price = '1'\n    const _price = parseEther(price)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    \n      const tx = await contr.fight(id1, id2, overrides).catch((err) => setDisableFightBtn(false))\n      const recpt = await tx?.wait()\n      if (recpt && recpt.status) {\n        setFightTxDone(true)\n      }\n\n      if (recpt && !recpt.status) {\n        toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n        setFightTxDone(false)\n      }\n\n  }\n\n  // Function that starts sharing a Cryptomon to another address through a smart contract function\n  async function startSharing(id, address) {\n    setIsShareLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.startSharing(id, address, overrides).catch((err) => setIsShareLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsShareLoading(false)\n    }\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsShareLoading(false)\n    }\n  }\n\n  async function ClaimToken(id, _amount) {\n    \n    setIsShareLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.ClaimToken(id, _amount, overrides).catch((err) => setIsShareLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsShareLoading(false)\n    }\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsShareLoading(false)\n    }\n  }\n\n  // Function that rename your solider through a smart contract function\n  async function NamePets(id, _name) {\n    setIsShareLoading(true)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const tx = await contr.NamePets(id, _name, overrides).catch((err) => setIsShareLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsShareLoading(false)\n    }\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsShareLoading(false)\n    }\n  }\n\n   // Function that mint baby through a smart contract function\n   async function createMon() {\n    \n    setIsShareLoading(true)\n    const newprice = `${BigInt(10000000000000000)}`\n    let overrides = {\n      value: newprice,\n      gasLimit: 220000,\n    }\n    \n    const price = '1'\n    const _price = parseEther(price)\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    approve(library, account, priceInWei)\n    .then(async (results) => {\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const tx = await contr.createMon(overrides).catch((err) => setIsShareLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsShareLoading(false)\n    }\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsShareLoading(false)\n    }\n  })\n  .catch((e) => {\n    toast.error(`Error: ${e?.message}`)\n    setDisableBuyItem(false)\n  })\n\n  }\n\n  async function multiMint() {\n    setIsShareLoading(true)\n    // const newprice = `${BigInt(10000000000000000)}`\n    let overrides = {\n      // value: 1000000000,\n      gasLimit: 1000000,\n    }\n    const price = '1'\n    const _price = parseEther(price)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    \n    const tx = await contr.multiMint(overrides).catch((err) => setIsShareLoading(false))\n    const recpt = await tx?.wait()\n    if (recpt && recpt.status) {\n      toast.success(`Success, Tx hash: ${recpt.transactionHash}`)\n      refreshMons()\n      setIsShareLoading(false)\n    }\n    if (recpt && !recpt.status) {\n      toast.error(`Error, Tx hash: ${recpt.transactionHash}`)\n      setIsShareLoading(false)\n    }\n  \n  }\n\n\n\n\n\n  // Handlers for form inputs\n  function handleShareId(event) {\n    setShareId(event.target.value)\n  }\n  function handleShareAddress(event) {\n    setShareAddress(event.target.value)\n  }\n\n  function handleRenameId(event) {\n    setRenameId(event.target.value)\n  }\n\n  function handleYourName(event) {\n    setYourName(event.target.value)\n  }\n\n  function handleChange(id, event) {\n    setValue( id.value)\n    setValue( event.target.value)\n  }\n\n\n  function handleBuyItemAmount(event) {\n    setBuyItemAmount(event.target.value)\n  }\n\n  function handleLuckyAmount(event) {\n    setLuckyAmount(event.target.value)\n  }\n\n  function handleSingleAmount(event) {\n    setBuySingleAmount(event.target.value)\n  }\n\n  function handleDoubleAmount(event) {\n    setBuyDoubleAmount(event.target.value)\n  }\n\n  function handleBuyZhuangAmount(event) {\n    setBuyZhuangAmount(event.target.value)\n  }\n\n  function handleInvitationCode(event) {\n    setInvitationCode(event.target.value)\n  }\n\n  function handleBuyXiangAmount(event) {\n    setBuyXiangAmount(event.target.value)\n  }\n\n  function handleBuyHe(event) {\n    setBuyHeAmount(event.target.value)\n  }\n\n  function handleBuybigAmount(event) {\n    setBuybigAmount(event.target.value)\n  }\n\n  function handleBuySmallAmount(event) {\n    setBuySmallAmount(event.target.value)\n  }\n\n  function handleCashOutAmount(event) {\n    setCashOutAmount(event.target.value)\n  }\n\n  function handleBurn(event) {\n    setBurnAmount(event.target.value)\n  }\n\n  async function buyItem(units: string, price: string, itemNumber: string, data: string = '0x00') {\n    setDisableBuyItem(true)\n    if (!units || !price || !itemNumber) {\n      return\n    }\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const _price = parseEther(price)\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    approve(library, account, priceInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.buyItem(units, priceInWei, itemNumber, data, overrides)\n          const recpt = await tx?.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  // Function that used for healing mons\n  async function Healing(id, units: string, itemNumber: string, data: string = '0x00') {\n    setDisableBuyItem(true)\n    // if (!units || !itemNumber) {\n    //   return\n    // }\n    let overrides = {\n      gasLimit: 120000,\n    }\n    const price = '1'\n    const _price = parseEther(price)\n    const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n    const priceInWei = `${BigNumber.from(_price._hex).toBigInt()}`\n    setApprovalForAll(library, account, priceInWei)\n    .then(async (results) => {\n      if (results) {\n        const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n        const tx = await contr.Healing(id, units, itemNumber, data, overrides)\n        const recpt = await tx?.wait()\n        txSuccess(recpt, toast, refreshMons)\n        txFail(recpt, toast)\n      } else {\n        toast.error(`Error in approving`)\n      }\n      setDisableBuyItem(false)\n    })\n    .catch((e) => {\n      toast.error(`Error: ${e?.message}`)\n      setDisableBuyItem(false)\n    })\n  }\n\n  async function burn(amount: string) {\n    setDisableBuyItem(true)\n    if (!amount) {\n      return\n    }\n    const _amount = parseEther(amount)\n    const amountInWei = `${BigNumber.from(_amount._hex).toBigInt()}`\n    let overrides = {\n      gasLimit: 120000,\n    }\n    approve(library, account, amountInWei)\n      .then(async (results) => {\n        if (results) {\n          const contr = new Contract(CONTRACT_ADDRESS, contrInterface, library.getSigner(account))\n          const tx = await contr.burn(amountInWei, overrides)\n          const recpt = await tx.wait()\n          txSuccess(recpt, toast, refreshMons)\n          txFail(recpt, toast)\n        } else {\n          toast.error(`Error in approving`)\n        }\n        setDisableBuyItem(false)\n      })\n      .catch((e) => {\n        toast.error(`Error: ${e?.message}`)\n        setDisableBuyItem(false)\n      })\n  }\n\n  // Components\n  // div that holds the name and id of each Cryptomon\n  const nameDiv = (mon) => {\n    return (\n      <div>\n       \n      </div>\n    )\n  }\n\n  // Function that  returns the style of the background image according to Cryptomons' type\n  const bgStyle = (Type) => ({\n    backgroundImage: 'url(' + bg[Type] + ')',\n    backgroundSize: '210px 240px',\n  })\n\n  // div that holds the images (Cryptomon image and background image) of a Cryptomon\n  const imgDiv = (mon) => {\n    return (\n      <div className=\"monBox\" style={bgStyle(mon?.monType)}>\n        <label className=\"\" style={{ float: 'left', fontSize: '14px', color: 'white'}}>\n          {mon?.Name}\n        </label>\n        <label className=\"\" style={{ float: 'right' }}>\n          {'ID:' + mon?.id}\n        </label>\n        <img className=\"monImg\" src={MonImages[`${parseInt(mon?.species) + 1}`]} alt={mon?.species} />\n        <label className=\"\" style={{ color: 'yellow'}} >{['lv:' + mon?.lv]}</label>\n        <label className=\"\" style={{ color: 'yellow', float: 'right'}} >{['MP:' + mon?.mp]}</label>\n      </div>\n    )\n  }\n\n  const BossimgDiv = (user) => {\n    return (\n        <div className=\"monBox\" style={bgStyle(user?.monType)}>\n\n         \n          <label className=\"\" style={{ color: 'yellow'}} >{['lv:' + user?.lv]}</label>\n         \n        </div>\n      )\n  }\n\n  const foruserlv = myCryptomons\n    .map((user) => (\n      <React.Fragment key={user.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {BossimgDiv(user)}\n          </figure>\n          \n        </div>\n      </React.Fragment>\n    ))\n\n  // div that holds the stats of a Cryptomon\n  const statDiv = (mon) => {\n    return (\n      <div className=\"stat-area\">\n\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Hp: </label>\n          <StatBar percentage={(mon?.hp * 100) / 140} />\n        </div>\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Attack: </label>\n          <StatBar percentage={(mon?.atk * 100) / 140} />\n        </div>\n        <div className=\"stat-line\">\n          <label className=\"stat-label\">Defense: </label>\n          <StatBar percentage={(mon?.def * 100) / 140} />\n        </div>\n      </div>\n    )\n  }\n\n  // used for claimtokendiv stat\n  const claimstatDIV = (mon) => {\n    return (\n      <div className=\"stat-area\">\n\n        <div className=\"stat-line\">\n          <label className=\"form-label\" style={{color: 'yellow'}} >Reward Balance: </label>\n          {mon?.rewardpool * 100}\n        </div>\n\n      </div>\n    )\n  }\n\n  // Create the div with add for sale button\n  const addForSaleDiv = (mon, value) => {\n    return (\n      <div className=\"selling-div\">\n        <label className=\"add-for-sale-label\">Set creatures price:</label>\n        <input type=\"number\"  className=\"add-for-sale-input\" placeholder='0' value={ mon.id.value} onChange={(e) => handleChange(mon?.id, e)}/>\n        {isAddForSaleLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => addForSale(mon?.id, value)} \n          >\n            Add for sale\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div for claim button\n  const ClaimtokenDiv = (mon, value) => {\n   \n    return (\n      <div className=\"selling-div\">\n        {isAddForSaleLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => {if(mon?.rewardpool < 50){ alert('Claim amount under 5000'); return null}\n\n              ClaimToken(mon?.id, '5000000000000000000000')} }\n          >\n            Claim\n            \n          </button>\n        )}\n        \n      </div>\n    )\n  }\n\n  // Create the div with remove from sale button\n  const removeFromSaleDiv = (mon) => {\n    return (\n      <div className=\"selling-div\">\n        <label className=\"remove-from-sale-label\">\n          Price:\n          <br />\n          {formatUnits(mon?.price)}\n        </label>\n        {isRemoveFromSaleLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => removeFromSale(mon?.id)} \n          >\n            Remove from sale\n            {isRemoveFromSaleLoading && <Spinner color=\"#000\" />}\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div with buy button\n  const buyDiv = (mon) => {\n    return (\n      <div className=\"buying-div\">\n        <div className=\"sale-price\">\n          Price:\n          <br />\n          {formatUnits(mon?.price, 18)}\n        </div>\n        <div className=\"sale-owner\">Creature Owner: {mon?.owner} </div>\n        {isBuyMonLoading ? (\n          <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n            <Spinner color=\"#000\" />\n          </button>\n        ) : (\n          <button\n            className=\"sale-btn rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => buyMon(mon?.id, mon?.price)}\n          >\n            Buy\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  // Create the div with breed choice 1, choice 2 buttons\n  const breedDiv = (mon) => {\n    return (\n      <div className=\"breed-choice-div\">\n        <button\n          className=\"br-Choice-btn rpgui-button\"\n          type=\"button\"\n          style={{ float: 'right' }}\n          onClick={() => { \n            setBreedChoice1(mon?.id)\n          }}\n        >\n          Choice 1\n        </button>\n        <button\n          className=\"br-Choice-btn rpgui-button\"\n          type=\"button\"\n          style={{ float: 'right' }}\n          onClick={() => {\n            setBreedChoice2(mon?.id)\n          }}\n        >\n          Choice 2\n        </button>\n      </div>\n    )\n  }\n\n  const breedOption = (breedchoice) => {\n    if (breedchoice === null) {\n      return (\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            <figcaption>\n              <div className=\"monBox\">\n                {' '}\n                <img className=\"monImg\" src={MonImages['151']} alt={'empty'} />\n              </div>\n            </figcaption>\n          </figure>\n        </div>\n      )\n    } else {\n      return cryptomons\n        .filter((mon) => mon.id === breedchoice)\n        .map((mon) => (\n          <React.Fragment key={mon.id}>\n            <div className=\"mon\">\n              <figure className=\"my-figure\">\n                {imgDiv(mon)}\n                <figcaption></figcaption>\n              </figure>\n            </div>\n          </React.Fragment>\n        ))\n    }\n  }\n\n  // div with users Cryptomons\n  const myCryptomonsDiv = myCryptomons\n    .filter((mon) => !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {addForSaleDiv(mon, value)}\n        </div>\n      </React.Fragment>\n    ))\n\n    // used for claim rewards\n    const claimtokenDiv = myCryptomons\n\n    .filter((mon) => !mon.forSale && mon?.rewardpool >= 5)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{claimstatDIV(mon)}</figcaption>\n          </figure>\n          {ClaimtokenDiv(mon, value)}\n        </div>\n      </React.Fragment>\n    ))\n\n\n  // div with user's Cryptomons that are for sale\n  const forSaleCryptomons = myCryptomons\n    .filter((mon) => mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {removeFromSaleDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with Cryptomons available for buy to the user\n  const buyCryptomons = otherCryptomons\n    .filter((mon) => mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {buyDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with user's Cryptomons that can be used for breeding\n  const forBreedCryptomons = myCryptomons\n    .filter((mon) => !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          {breedDiv(mon)}\n        </div>\n      </React.Fragment>\n    ))\n\n  const cond = (mon) =>\n    (mon.owner.toString().toLowerCase() === account?.toString()?.toLowerCase() && !mon.forSale) \n\n  // div with user's Cryptomons that can be used to fight with\n  const forFightWithCryptomons = cryptomons.filter(cond).map((mon) => (\n    <React.Fragment key={mon.id}>\n      <div className=\"mon\">\n        <figure className=\"my-figure\">\n          {nameDiv(mon)}\n          {imgDiv(mon)}\n          <figcaption>{statDiv(mon)}</figcaption>\n        </figure>\n        <div className=\"fight-choice-div\">\n          <button\n            className=\"fight-Choice-btn rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            // onClick={() => {\n            //   setFightChoice1(mon.id)\n            // }} \n            onClick={() => {\n              if(mon?.hp < 70){ alert('hp too low'); return null}\n              setFightChoice1(mon.id)\n            }} \n            \n          >\n            Choice 1\n          </button>\n        </div>\n        <div className=\"fight-choice-div\">\n          <button\n            className=\"fight-Choice-btn rpgui-button\"\n            type=\"button\"\n            style={{ float: 'right' }}\n            onClick={() => {\n              Healing(mon.id, '50', '0')\n            }}\n            disabled={disableBuyItemBtn}\n          >\n            Healing\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  ))\n\n  // div with Cryptomons that user can fight against\n  const forFightAgainstCryptomons = otherCryptomons\n  \n    .filter((mon) => !mon.forSale   && mon.hp >= 70 && mon.owner.toLowerCase() !== deadaddress?.toString().toLocaleLowerCase())\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          <div className=\"fight-choice-div\">\n            <button\n              className=\"fight-Choice-btn rpgui-button\"\n              type=\"button\"\n              style={{ float: 'right' }}\n              onClick={() => {\n                setFightChoice2(mon.id)\n              }}\n            >\n              Choice 2\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    ))\n\n\n  // div with user's shared Cryptomons\n  const MyownMon = myCryptomons\n    .filter((mon) => mon.owner.toLowerCase() === account?.toString().toLocaleLowerCase() && !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n        </div>\n      </React.Fragment>\n    ))\n\n  // div with Cryptomons shared to the user\n  const sharedToMe = otherCryptomons\n  .filter((mon) =>  !mon.forSale)\n    .map((mon) => (\n      <React.Fragment key={mon.id}>\n        <div className=\"mon\">\n          <figure className=\"my-figure\">\n            {nameDiv(mon)}\n            {imgDiv(mon)}\n            <figcaption>{statDiv(mon)}</figcaption>\n          </figure>\n          <div className=\"sharing-div\">\n            <label className=\"shared-owner\">Creature Owner: {mon.owner} </label>\n            \n          </div>\n        </div>\n      </React.Fragment>\n    ))\n\n  // Function that does all the rendering of the application\n  return (\n    // Creation of the different tabs of the UI\n    <div className=\"rpgui-content\">\n      <ToastContainer />\n\n      <div className=\"AppTitle\">\n        <div className=\"row\" style={{ maxWidth: '100%' }}>\n          <div className=\"column title-column col-lg-3 col-sm-12\">\n            <img src={MonImages['favicon16x16']} alt=\"lokian-logo\" /> <span>Block & Time </span>\n          </div>\n\n          <div className=\"column user-info-column col-lg-3 col-sm-12\">\n            {/* ERC20, LOKs */}\n            <span className=\"rpgui-container framed-grey\">\n           {foruserlv}\n            <div className=\"p1\" style={{ padding: '2px', fontSize: '15px'}}>\n            当前余额\n          </div>\n              {`${Math.round(Number(tokenBalance) * 1e4) / 1e4 || '0'}  `}{' '}\n            </span>\n          </div>\n\n          <div className=\"column wallet-info-column col-lg-6 col-sm-12\">\n            <div className=\"row wallet-buttons\">\n              {/* wallet logout */}\n              <div className={`column wallet-column ${active ? 'col-lg-3' : ''} col-sm-12`}>\n                {(active || error) && (\n                  <button\n                    className=\"rpgui-button\"\n                    onClick={() => {\n                      deactivate()\n                      setCryptomons([])\n                      setMyCryptomons([])\n                      setOtherCryptomons([])\n                      setWinner(null)\n                      setRounds(null)\n                      setValue(0)\n                    }}\n                  >\n                    Logout\n                  </button>\n                )}\n              </div>\n              {/* wallet info */}\n              {Object.keys(connectorsByName).map((name) => {\n                const currentConnector = connectorsByName[name]\n                const activating = currentConnector === activatingConnector\n                const connected = currentConnector === connector\n                const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n                return (\n                  <div className={`column wallet-column col-lg-${active ? '9' : '12'} col-sm-12`}>\n                    <button\n                      className=\"rpgui-button golden\"\n                      type=\"button\"\n                      style={{\n                        fontSize: '20px',\n                        paddingTop: '14px',\n                        width: '100%',\n                      }}\n                      onClick={() => {\n                        setActivatingConnector(currentConnector)\n                        activate(currentConnector)\n                      }}\n                      disabled={disabled}\n                      key={name}\n                    >\n                      {activating && <Spinner color={'black'} style={{ height: '25%', marginLeft: '-1rem' }} />}\n                      <Account />\n                      <div style={{ display: 'none' }}>{name}</div>\n                      {!account ? 'Connect Wallet' : ''}\n                    </button>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"column user-info-column col-lg-12 col-sm-12\">\n            {/* Network Errors */}\n            {!!error && (\n              <h4 className=\"rpgui-container framed-golden-2\" style={{ marginTop: '1rem', marginBottom: '0' }}>\n                {getErrorMessage(error)}\n              </h4>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultActiveKey=\"myCryptomons\" id=\"uncontrolled-tab-example\">\n        {/* <Tab className=\"x\" eventKey=\"myCryptomons\" title=\"My Creatures\">\n          <div className=\"p1\">Your Entries</div>\n          {myCryptomonsDiv}\n        </Tab> */}\n\n        {/* <Tab className=\"x\" eventKey=\"MintBaby\" title=\"Get Your Baby\">\n          <div className=\"p1\" style={{\n                        fontSize: '20px',\n                        paddingTop: '14px',\n                        width: '100%',\n                        color: 'orange',\n                      }} >Get Your Baby Now</div>\n\n          <div className=\"sharing-area\">\n\n          <div className=\"skellies\">\n               \n\n              <img className=\"monImg\" style={{\n                        height: '220px',\n                        paddingTop: '4px',\n                        width: '480px',\n                      }} src={MonImages['MintCard']} alt=\"skeleton-people-1\" />\n\n            </div>\n           \n            <div className=\"form-line\">\n              {isShareLoading ? (\n                <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                  <Spinner color=\"#000\" />\n                </button>\n              ) : (\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => createMon()}\n                >\n                  Mint Baby x 1\n                </button>\n              )}\n            </div>\n\n            <div className=\"form-line\">\n              {isShareLoading ? (\n                <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                  <Spinner color=\"#000\" />\n                </button>\n              ) : (\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => multiMint()}\n                >\n                  Mint Baby x 5\n                </button>\n              )}\n            </div>\n\n          </div>\n\n          {MyownMon}\n        </Tab> */}\n\n\n        {/* <Tab eventKey=\"forSale\" title=\"My Shop\">\n          <div className=\"p1\">My Shop</div>\n          {forSaleCryptomons}\n        </Tab> */}\n\n        {/* <Tab eventKey=\"buyCryptomons\" title=\"Marketplace\">\n          {buyCryptomons}\n        </Tab> */}\n\n        <Tab eventKey=\"breedCryptomons\" title=\"简介\">\n          <div className=\"p1\"><div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n          全球首个区块链去中心化竞彩平台\n          </div></div>\n\n\n          <div className=\"breeding-area\">\n            {breedOption(breedChoice1)} <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n\n            <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n          B & T <br/>始终坚持创新，追求信誉，独家首创全链上交互操作，安全高效♻️<br/>\n          全站采用区块链上的区块高度和区块时间作为开奖结果，链上数据不可篡改🔥<br/>\n          实时返奖，立志打造一个真正的去中心化区块链娱乐网站<br/>\n          🔥注重信誉和口碑积累，玩家认可度高，DAO理念，品牌助力代理自主发展会员。<br/>\n          🔥公平、公正、公开的顶级一站式服务，为玩家打造高端、舒适游戏环境\n          </div>\n            {isBreedMonLoading ? (\n              <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                <Spinner color=\"#000\" />\n\n              </button>\n            ) : (\n              <button\n                className=\"rpgui-button\"\n                type=\"button\"\n                style={{ width: '420px' }}\n                // onClick={() => {window.location.href= 'https://t.me/jianlaiSQ' } }\n                onClick={() =>window.open('https://t.me/BlockandTime') }\n                 \n              >\n            <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n          加入电报频道\n          </div>\n              </button>\n            )}\n\n{isBreedMonLoading ? (\n              <button className=\"rpgui-button\" type=\"button\" style={{ width: '100%' }}>\n                <Spinner color=\"#000\" />\n              </button>\n            ) : (\n              <button\n                className=\"rpgui-button\"\n                type=\"button\"\n                style={{ width: '420px' }}\n                // onClick={() => {window.location.href= 'https://t.me/jianlaiSQ' } }\n                onClick={() =>window.open('https://t.me/BlockandTimeBot') }\n                 \n              >\n            <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n          联系电报在线客服\n          </div>\n              </button>\n            )}\n          </div>\n\n          <br />\n          {forBreedCryptomons}\n        </Tab>\n\n \n\n        {/* <Tab eventKey=\"fight\" title=\"PVP-MODE\">\n          <div className=\"p1\">V S</div>\n          <div className=\"fighting-area\">\n            {breedOption(fightChoice1)}\n            {breedOption(fightChoice2)}\n            \n\n            <label className=\"winner-label\">\n              {' '}\n              {fightTxDone ? names[cryptomons.find((mon) => mon.id?.toString() === winner?.toString())?.species] : ''}\n              {!winner || winner === 12345678911 ? '' : ''}\n              {winner === 12345678910 ? \"no one, it's a tie\" : ''}\n            </label>\n\n            {fightTxDone && winner !== 12345678910 ? (\n              <>\n                <br />\n                <label className=\"winner-label\">Winning creature's Id: {winner}</label>\n                <br />\n                <label className=\"winner-label\">Rounds the fight lasted: {rounds}</label>\n                <br />\n\n                {!fightTxDone && rewards === 0 && !winner ? (\n                  ''\n                ) : (\n                  <label className=\"winner-label\">{rewards === 0 ? '' : `You have won ${rewards * 100} LOKs!`}</label>\n                )}\n\n{!fightTxDone && rewards === 0 && !winner ? (\n                  ''\n                ) : (\n                  <label className=\"winner-label\">{rewards === 0 ? '' : <div className=\"skellies\">\n               \n\n                  <img className=\"monImg\" style={{\n                            height: '220px',\n                            paddingTop: '4px',\n                            width: '480px',\n                          }} src={MonImages['MintCard']}  />\n    \n                </div>}</label>\n                )} \n\n {!fightTxDone && rewards !== 0 && !winner ? (\n                  ''\n                ) : (\n                  <label className=\"winner-label\">{rewards !== 0 ? '' : `You have loat ${rounds * 100} LOKs!`}</label>\n                )}\n\n{!fightTxDone && rewards !== 0 && !winner ? (\n                  ''\n                ) : (\n                  <label className=\"winner-label\">{rewards !== 0 ? '' : <div className=\"skellies\">\n               \n\n                  <img className=\"monImg\" style={{\n                            height: '220px',\n                            paddingTop: '4px',\n                            width: '480px',\n                          }} src={MonImages['5']}  />\n    \n                </div>}</label>\n                )}\n\n\n              </>\n            ) : (\n              ''\n            )}\n\n            {disableFightBtn ? (\n              <div className=\"skellies\">\n               \n                  <img className=\"monImg\" style={{\n                            height: '220px',\n                            paddingTop: '4px',\n                            width: '480px',\n                          }} src={MonImages['fight']}  />\n    \n                </div>\n            ) : (\n              <button\n                id=\"fight-btn\"\n                className=\"rpgui-button\"\n                type=\"button\"\n                onClick={() => {\n                  setWinner(null)\n                  setRounds(null)\n                  setFightTxDone(false)\n                  setRewards(0)\n                  fight(fightChoice1, fightChoice2)\n                }}\n                disabled={disableFightBtn}\n              >\n                Fight with choosen creatures\n              </button>\n            )}\n          </div>\n\n          <div className=\"fight-mons-area\">\n            <div className=\"fightWith-area\">\n              <div className=\"p2\">Your Babys</div>\n              {forFightWithCryptomons}\n            </div>\n\n            <div className=\"fightAgainst-area\">\n              <div className=\"p2\">Opponent Creatures</div>\n              {forFightAgainstCryptomons}\n            </div>\n          </div> \n\n\n        </Tab> */}\n\n\n        <Tab eventKey=\"share\" title=\"单双玩法\">\n        <div className=\"p1\">\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '30px'}}>\n            单双玩法\n          </div>\n            <div style={{ marginLeft: '46%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div className=\"column\">\n                  {!swords ? <div className=\"rpgui-icon magic-slot\"></div> : <div className=\"rpgui-icon sword\"></div>}\n                  {!shields ? (\n                    <div className=\"rpgui-icon helmet-slot\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon shield\"></div>\n                  )}\n                  {/* {healingPotions || manaPotions || magicPotions ? (\n                    <div className=\"rpgui-icon potion-red\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon potion-slot\"></div>\n                  )} */}\n                </div>\n              </div>\n            </div>\n            <br />\n            <div style={{ marginLeft: '20%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  {/* <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p> */}\n                  <div className=\"p1\" style={{ padding: '12px', fontSize: '20px'}}>\n                  游戏规则\n          </div>\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '20px', alignItems: 'flex-start'}}>\n              赔率：2倍 <br />\n投注根据链上交易产生的区块高度最后一个数字和区块时间的最后一个数字相加后的个位数作为开奖结果 <br />\n如两个数相加为 18，个位为 8；则此次开奖结果为双  <br />\n如两个数相加为 9，个位为 9；则此次开奖结果为单  <br />\n\n1,3,5,7,9 识别为单 <br />\n\n0,2,4,6,8 识别为双 <br />\n\n全程由区块链自动运行，接受任意额度的投注\n          </div>\n                  {/* <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p> */}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n            \n            \n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            投注金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buysingleAmount}\n                  onChange={(e) => handleSingleAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => BuySingle(buysingleAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                 <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            押单\n          </div>\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            投注金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buydoubleAmount}\n                  onChange={(e) => handleDoubleAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => BuyDouble(buydoubleAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                   <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            押双\n          </div>\n                </button>\n              </div>\n            </div>\n\n           \n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-green\"></div> 全球首创区块链 BSC 自动化竞彩平台\n              </span>\n             \n            </div>\n          </div>\n        </Tab>\n                 \n        <Tab eventKey=\"ggg\" title=\"百家乐\">\n        <div className=\"p1\">\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '30px'}}>\n            庄闲和\n          </div>\n            <div style={{ marginLeft: '45%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div className=\"column\">\n                  {!swords ? <div className=\"rpgui-icon weapon-slot\"></div> : <div className=\"rpgui-icon sword\"></div>}\n                  {!shields ? (\n                    <div className=\"rpgui-icon shield-slot\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon shield\"></div>\n                  )}\n                  {healingPotions || manaPotions || magicPotions ? (\n                    <div className=\"rpgui-icon potion-red\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon potion-slot\"></div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <br />\n            <div style={{ marginLeft: '20%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  {/* <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p> */}\n                  <div className=\"p1\" style={{ padding: '12px', fontSize: '20px'}}>\n                  游戏规则\n          </div>\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '20px', alignItems: 'flex-start'}}>\n              庄闲赔率：2倍 <br />\n              押和赔率：8倍 <br />\n投注根据链上交易产生的区块高度最后一个数字和区块时间的最后一个数字相加后的个位数作为开奖结果 <br />\n区块链上产生的区块高度最后一个数字作为 庄  <br />\n区块链上产生的区块时间最后一个数字作为 闲   <br />\n\n假如区块高度最后一个数大于区块时间的最后一个数， 识别为庄赢 <br />\n\n假如区块高度最后一个数小于区块时间的最后一个数， 识别为闲赢 <br />\n\n当两个数字相同时，结果识别为 和 <br />\n\n全程由区块链自动运行，接受任意额度的投注\n          </div>\n                  {/* <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p> */}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n            \n            \n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            投注金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyZhuangAmount}\n                  onChange={(e) => handleBuyZhuangAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => BuyZhuang(buyZhuangAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                 <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            押庄\n          </div>\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            投注金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyXiangAmount}\n                  onChange={(e) => handleBuyXiangAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => BuyXiang(buyXiangAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                   <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            押闲\n          </div>\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            投注金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyHeAmount}\n                  onChange={(e) => handleBuyHe(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => BuyHe(buyHeAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                   <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            押和\n          </div>\n                </button>\n              </div>\n            </div>\n\n           \n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-green\"></div> 全球首创区块链 BSC 自动化竞彩平台\n              </span>\n             \n            </div>\n          </div>\n        </Tab>\n\n\n\n\n        <Tab eventKey=\"token\" title=\"猜大小\" >\n\n          <div className=\"p1\">\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '30px'}}>\n            大小玩法\n          </div>\n            <div style={{ marginLeft: '49%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div className=\"column\">\n                  {/* {!swords ? <div className=\"rpgui-icon shoes-slot\"></div> : <div className=\"rpgui-icon sword\"></div>} */}\n                  {!shields ? (\n                    <div className=\"rpgui-icon shoes-slot\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon shield\"></div>\n                  )}\n                  {/* {healingPotions || manaPotions || magicPotions ? (\n                    <div className=\"rpgui-icon potion-red\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon potion-slot\"></div>\n                  )} */}\n                </div>\n              </div>\n            </div>\n            <br />\n            <div style={{ marginLeft: '20%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  {/* <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p> */}\n                  <div className=\"p1\" style={{ padding: '12px', fontSize: '20px'}}>\n                  游戏规则\n          </div>\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '20px', alignItems: 'flex-start'}}>\n              赔率：2倍 <br />\n投注根据链上交易产生的区块高度最后一个数字和区块时间的最后一个数字相加作为开奖结果 <br />\n\n0 - 9 识别为小 <br />\n\n10 - 18 识别为大 <br />\n\n全程由区块链自动运行，接受任意额度的投注\n          </div>\n                  {/* <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p> */}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n            \n            \n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            投注金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyBigAmount}\n                  onChange={(e) => handleBuybigAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => BuyBig(buyBigAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                 <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            押大\n          </div>\n                </button>\n              </div>\n            </div>\n\n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            投注金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buySmallAmount}\n                  onChange={(e) => handleBuySmallAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => BuySmall(buySmallAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                   <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            押小\n          </div>\n                </button>\n              </div>\n            </div>\n\n           \n\n            <div className=\"sharing-area\">\n              <span>\n                <div className=\"rpgui-icon potion-green\"></div> 全球首创区块链 BSC 自动化竞彩平台\n              </span>\n             \n            </div>\n          </div>\n\n         \n        </Tab>\n\n        <Tab eventKey=\"share1\" title=\"幸运区块链\">\n        <div className=\"p1\">\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '30px'}}>\n            幸运区块链\n          </div>\n            <div style={{ marginLeft: '45%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div className=\"column\">\n                  {!swords ? <div className=\"rpgui-icon weapon-slot\"></div> : <div className=\"rpgui-icon sword\"></div>}\n                  {!shields ? (\n                    <div className=\"rpgui-icon shield-slot\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon shield\"></div>\n                  )}\n                  {healingPotions || manaPotions || magicPotions ? (\n                    <div className=\"rpgui-icon potion-red\"></div>\n                  ) : (\n                    <div className=\"rpgui-icon potion-slot\"></div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <br />\n            <div style={{ marginLeft: '20%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  {/* <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p> */}\n                  <div className=\"p1\" style={{ padding: '12px', fontSize: '20px'}}>\n                  游戏规则\n          </div>\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '20px', alignItems: 'flex-start'}}>\n              赔率：10倍 <br />\n投注根据链上交易产生的区块高度最后一个数字和<br />\n\n区块时间的最后一个数字相加后的数字作为开奖结果 <br />\n\n最小的开奖结果为 0 <br />\n\n最大的开奖结果为18 <br />\n\n玩家输入0 - 18 其中的任意数字，当开奖结果和玩家输入的数字相同时则赢  <br />\n\n全程由区块链自动运行，接受任意额度的投注\n          </div>\n                  {/* <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p> */}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n            \n            \n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            输入 0 - 18 任意数字\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={luckyamount}\n                  onChange={(e) => handleLuckyAmount(e)}\n                />\n              </div>\n           \n            </div>\n\n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            投注金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => LuckyNumber(luckyamount,buyItemAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                   <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            确认\n          </div>\n                </button>\n              </div>\n            </div>\n\n           \n\n            <div className=\"sharing-area\">\n              <span>\n              <div className=\"rpgui-icon potion-green\"></div> 全球首创区块链 BSC 自动化竞彩平台\n          \n              </span>\n             \n            </div>\n          </div>\n        </Tab>\n\n        <Tab eventKey=\"token2\" title=\"上分\">\n        <div className=\"p1\" style={{ padding: '12px', fontSize: '30px'}}>\n            剩余额度\n          </div>\n          <div className=\"p1\" style={{ padding: '12px' }}>\n            {tokenBalance} 分\n          </div>\n          <br />\n          <br />\n          <div className=\"p1\">\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '20px'}}>\n            号外：充值任意金额一律返水5%❗️ <br/>\n            注： 暂只支持 BSC 链 USDT 上分\n          </div>\n         \n            <br />\n            <div style={{ marginLeft: '40%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  {/* <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p> */}\n       \n                  {/* <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p> */}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '20px'}}>\n          各位老板，近期骗子无数，无论是客服还是财务，但凡私聊发地址充钱❗️❗️❗️以高额彩金诱导充值上分的均为骗子 \n❗️❗️上下分请您在本站操作 ❗️❗️\n          </div>\n            \n            <div className=\"sharing-area\">\n              <span>\n             \n              </span>\n              {/* <div className=\"form-line with-buy-item\">\n                <label className=\"form-label\">Amount</label>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => buyItem(buyItemAmount, '500', '3')}\n                  disabled={disableBuyItemBtn}\n                >\n                  Buy\n                </button>\n              </div> */}\n            </div>\n\n       \n\n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            充值金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={CashOuteAmount}\n                  onChange={(e) => handleCashOutAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => AddCredit(CashOuteAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                  Confirm\n                </button>\n              </div>\n            </div>\n\n           \n\n            \n          </div>\n        </Tab>\n\n        \n        <Tab className=\"x\" eventKey=\"claim\" title=\"下分\">\n        <div className=\"p1\" style={{ padding: '12px', fontSize: '20px'}}>\n            可用额度\n          </div>\n        \n          <div className=\"p1\" style={{ padding: '12px' }}>\n            {tokenBalance} 分\n          </div>\n          <br />\n          <br />\n          <div className=\"p1\">\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '30px'}}>\n            下分在此操作\n          </div>\n         \n            <br />\n            <div style={{ marginLeft: '40%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  {/* <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p> */}\n       \n                  {/* <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p> */}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n\n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            下分金额\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={buyItemAmount}\n                  onChange={(e) => handleBuyItemAmount(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => Cashout(buyItemAmount)}\n                  disabled={disableBuyItemBtn}\n                >\n                  Confirm\n                </button>\n              </div>\n            </div>\n\n           \n\n            \n          </div>\n        \n        </Tab>\n\n        <Tab className=\"s\" eventKey=\"claims\" title=\"邀请返佣\">\n        <div className=\"p1\" style={{ padding: '12px', fontSize: '20px'}}>\n            返佣机制\n          </div>\n        \n         \n          <br />\n          <br />\n          <div className=\"p1\">\n          <div className=\"p1\" style={{ padding: '12px', fontSize: '30px'}}>\n            用户先在下方点击生成邀请码 <br/>\n            完成后，您的钱包地址就相当于您的专属邀请码  <br/>\n            当有受邀者使用您的邀请码（即钱包地址）完成注册时  <br/>\n            每次受邀者上分时，系统会自动转账上分金额的5%到您的钱包地址 <br/>\n            注：用户使用邀请码注册后，每次上分可额外得到 2% 的返水 <br/>\n            用戶注册后其钱包地址也会自动成为邀请码，无需重新点击生成验证码\n          </div>\n         \n            <br />\n            <div style={{ marginLeft: '40%', marginRight: 'auto' }}>\n              <div className=\"row\">\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                  {/* <p>You have {`${swords}`} swords!</p>\n                  <p>You have {`${shields}`} shields!</p> */}\n       \n                  {/* <p>You have {`${manaPotions}`} mana potions!</p>\n                  <p>You have {`${magicPotions}`} magic potions!</p> */}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"rpgui-container framed-grey\">\n\n            <div className=\"sharing-area\">\n              {/* <span>\n                <div className=\"rpgui-icon potion-red\"></div>A Healing Potion (50 Loks)\n              </span> */}\n              <div className=\"form-line with-buy-item\">\n              <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n            请在下方输入邀请码\n          </div>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"0\"\n                  value={InvitationCode}\n                  onChange={(e) => handleInvitationCode(e)}\n                />\n              </div>\n              <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => RegistryWithInvitor(InvitationCode)}\n                  disabled={disableBuyItemBtn}\n                >\n                   <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n           完成注册\n          </div>\n                </button>\n              </div>\n            </div>\n\n            <div className=\"form-line with-buy-item\">\n                <button\n                  className=\"rpgui-button\"\n                  type=\"button\"\n                  style={{ float: 'right' }}\n                  onClick={() => Registry()}\n                  disabled={disableBuyItemBtn}\n                >\n                  <div className=\"p1\" style={{ padding: '2px', fontSize: '20px'}}>\n           点击生成邀请码\n          </div>\n                </button>\n              </div>\n\n           \n\n            \n          </div>\n        \n        </Tab>\n\n      </Tabs>\n    </div>\n  )\n}\n\nexport default App\n","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/utils/txSuccess.js",[],["98","99"],"/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/utils/txFail.js",[],"/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/wallet/connectors.ts",[],"/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/wallet/hooks.ts",["100"],"import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized: boolean) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, []) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n\n  export function useInactiveListener(suppress: boolean = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect((): any => {\n      const { ethereum } = window as any\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId: string | number) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts: string[]) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId: string | number) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }","/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/StatBar.tsx",[],"/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/components/Spinner.tsx",[],"/Users/jarvan/Desktop/bsc.lokian.monster-bsc/src/sprites/index.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":12,"column":1,"nodeType":"107","endLine":18,"endColumn":2},{"ruleId":"108","severity":1,"message":"109","line":43,"column":10,"nodeType":"110","messageId":"111","endLine":43,"endColumn":29},{"ruleId":"108","severity":1,"message":"112","line":46,"column":10,"nodeType":"110","messageId":"111","endLine":46,"endColumn":20},{"ruleId":"108","severity":1,"message":"113","line":47,"column":10,"nodeType":"110","messageId":"111","endLine":47,"endColumn":30},{"ruleId":"108","severity":1,"message":"114","line":48,"column":10,"nodeType":"110","messageId":"111","endLine":48,"endColumn":31},{"ruleId":"108","severity":1,"message":"115","line":49,"column":10,"nodeType":"110","messageId":"111","endLine":49,"endColumn":14},{"ruleId":"108","severity":1,"message":"116","line":50,"column":10,"nodeType":"110","messageId":"111","endLine":50,"endColumn":18},{"ruleId":"108","severity":1,"message":"117","line":73,"column":7,"nodeType":"110","messageId":"111","endLine":73,"endColumn":12},{"ruleId":"108","severity":1,"message":"118","line":291,"column":10,"nodeType":"110","messageId":"111","endLine":291,"endColumn":22},{"ruleId":"108","severity":1,"message":"119","line":293,"column":10,"nodeType":"110","messageId":"111","endLine":293,"endColumn":22},{"ruleId":"108","severity":1,"message":"120","line":294,"column":10,"nodeType":"110","messageId":"111","endLine":294,"endColumn":22},{"ruleId":"108","severity":1,"message":"121","line":295,"column":10,"nodeType":"110","messageId":"111","endLine":295,"endColumn":16},{"ruleId":"108","severity":1,"message":"122","line":296,"column":10,"nodeType":"110","messageId":"111","endLine":296,"endColumn":16},{"ruleId":"108","severity":1,"message":"123","line":297,"column":10,"nodeType":"110","messageId":"111","endLine":297,"endColumn":17},{"ruleId":"108","severity":1,"message":"124","line":298,"column":10,"nodeType":"110","messageId":"111","endLine":298,"endColumn":22},{"ruleId":"108","severity":1,"message":"125","line":299,"column":10,"nodeType":"110","messageId":"111","endLine":299,"endColumn":18},{"ruleId":"108","severity":1,"message":"126","line":300,"column":10,"nodeType":"110","messageId":"111","endLine":300,"endColumn":18},{"ruleId":"108","severity":1,"message":"127","line":303,"column":10,"nodeType":"110","messageId":"111","endLine":303,"endColumn":17},{"ruleId":"108","severity":1,"message":"128","line":325,"column":10,"nodeType":"110","messageId":"111","endLine":325,"endColumn":20},{"ruleId":"108","severity":1,"message":"129","line":327,"column":10,"nodeType":"110","messageId":"111","endLine":327,"endColumn":24},{"ruleId":"130","severity":1,"message":"131","line":343,"column":6,"nodeType":"132","endLine":343,"endColumn":38,"suggestions":"133"},{"ruleId":"130","severity":1,"message":"131","line":359,"column":6,"nodeType":"132","endLine":359,"endColumn":60,"suggestions":"134"},{"ruleId":"130","severity":1,"message":"131","line":405,"column":6,"nodeType":"132","endLine":405,"endColumn":37,"suggestions":"135"},{"ruleId":"108","severity":1,"message":"136","line":479,"column":18,"nodeType":"110","messageId":"111","endLine":479,"endColumn":29},{"ruleId":"108","severity":1,"message":"137","line":845,"column":18,"nodeType":"110","messageId":"111","endLine":845,"endColumn":27},{"ruleId":"108","severity":1,"message":"138","line":851,"column":11,"nodeType":"110","messageId":"111","endLine":851,"endColumn":21},{"ruleId":"108","severity":1,"message":"139","line":877,"column":18,"nodeType":"110","messageId":"111","endLine":877,"endColumn":23},{"ruleId":"108","severity":1,"message":"138","line":889,"column":11,"nodeType":"110","messageId":"111","endLine":889,"endColumn":21},{"ruleId":"108","severity":1,"message":"140","line":905,"column":18,"nodeType":"110","messageId":"111","endLine":905,"endColumn":30},{"ruleId":"108","severity":1,"message":"141","line":945,"column":18,"nodeType":"110","messageId":"111","endLine":945,"endColumn":26},{"ruleId":"108","severity":1,"message":"142","line":965,"column":19,"nodeType":"110","messageId":"111","endLine":965,"endColumn":28},{"ruleId":"108","severity":1,"message":"143","line":999,"column":18,"nodeType":"110","messageId":"111","endLine":999,"endColumn":27},{"ruleId":"108","severity":1,"message":"138","line":1009,"column":11,"nodeType":"110","messageId":"111","endLine":1009,"endColumn":21},{"ruleId":"108","severity":1,"message":"144","line":1030,"column":12,"nodeType":"110","messageId":"111","endLine":1030,"endColumn":25},{"ruleId":"108","severity":1,"message":"145","line":1033,"column":12,"nodeType":"110","messageId":"111","endLine":1033,"endColumn":30},{"ruleId":"108","severity":1,"message":"146","line":1037,"column":12,"nodeType":"110","messageId":"111","endLine":1037,"endColumn":26},{"ruleId":"108","severity":1,"message":"147","line":1041,"column":12,"nodeType":"110","messageId":"111","endLine":1041,"endColumn":26},{"ruleId":"108","severity":1,"message":"148","line":1095,"column":12,"nodeType":"110","messageId":"111","endLine":1095,"endColumn":22},{"ruleId":"108","severity":1,"message":"149","line":1099,"column":18,"nodeType":"110","messageId":"111","endLine":1099,"endColumn":25},{"ruleId":"108","severity":1,"message":"150","line":1139,"column":11,"nodeType":"110","messageId":"111","endLine":1139,"endColumn":16},{"ruleId":"108","severity":1,"message":"151","line":1160,"column":18,"nodeType":"110","messageId":"111","endLine":1160,"endColumn":22},{"ruleId":"108","severity":1,"message":"152","line":1446,"column":9,"nodeType":"110","messageId":"111","endLine":1446,"endColumn":24},{"ruleId":"108","severity":1,"message":"153","line":1462,"column":11,"nodeType":"110","messageId":"111","endLine":1462,"endColumn":24},{"ruleId":"108","severity":1,"message":"154","line":1480,"column":9,"nodeType":"110","messageId":"111","endLine":1480,"endColumn":26},{"ruleId":"108","severity":1,"message":"155","line":1496,"column":9,"nodeType":"110","messageId":"111","endLine":1496,"endColumn":22},{"ruleId":"108","severity":1,"message":"156","line":1531,"column":9,"nodeType":"110","messageId":"111","endLine":1531,"endColumn":31},{"ruleId":"108","severity":1,"message":"157","line":1574,"column":9,"nodeType":"110","messageId":"111","endLine":1574,"endColumn":34},{"ruleId":"108","severity":1,"message":"158","line":1603,"column":9,"nodeType":"110","messageId":"111","endLine":1603,"endColumn":17},{"ruleId":"108","severity":1,"message":"159","line":1618,"column":9,"nodeType":"110","messageId":"111","endLine":1618,"endColumn":19},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"130","severity":1,"message":"160","line":21,"column":8,"nodeType":"132","endLine":21,"endColumn":10,"suggestions":"161"},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'showThrottleMessage' is defined but never used.","Identifier","unusedVar","'MaxUint256' is defined but never used.","'receiveMessageOnPort' is defined but never used.","'monitorEventLoopDelay' is defined but never used.","'read' is defined but never used.","'userInfo' is defined but never used.","'names' is assigned a value but never used.","'breedChoice2' is assigned a value but never used.","'fightChoice1' is assigned a value but never used.","'fightChoice2' is assigned a value but never used.","'winner' is assigned a value but never used.","'rounds' is assigned a value but never used.","'shareId' is assigned a value but never used.","'shareAddress' is assigned a value but never used.","'renameId' is assigned a value but never used.","'yourName' is assigned a value but never used.","'rewards' is assigned a value but never used.","'burnAmount' is assigned a value but never used.","'isShareLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshMons'. Either include it or remove the dependency array.","ArrayExpression",["164"],["165"],["166"],"'refreshUser' is defined but never used.","'breedMons' is defined but never used.","'priceInWei' is assigned a value but never used.","'fight' is defined but never used.","'startSharing' is defined but never used.","'NamePets' is defined but never used.","'createMon' is defined but never used.","'multiMint' is defined but never used.","'handleShareId' is defined but never used.","'handleShareAddress' is defined but never used.","'handleRenameId' is defined but never used.","'handleYourName' is defined but never used.","'handleBurn' is defined but never used.","'buyItem' is defined but never used.","'contr' is assigned a value but never used.","'burn' is defined but never used.","'myCryptomonsDiv' is assigned a value but never used.","'claimtokenDiv' is assigned a value but never used.","'forSaleCryptomons' is assigned a value but never used.","'buyCryptomons' is assigned a value but never used.","'forFightWithCryptomons' is assigned a value but never used.","'forFightAgainstCryptomons' is assigned a value but never used.","'MyownMon' is assigned a value but never used.","'sharedToMe' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'activate'. Either include it or remove the dependency array.",["167"],"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [activatingConnector, connector, refreshMons]",{"range":"176","text":"177"},"Update the dependencies array to be: [account, library, disableBuyItemBtn, disableFightBtn, refreshMons]",{"range":"178","text":"179"},"Update the dependencies array to be: [account, library, fightTxDone, refreshMons]",{"range":"180","text":"181"},"Update the dependencies array to be: [activate]",{"range":"182","text":"183"},[10337,10369],"[activatingConnector, connector, refreshMons]",[10641,10695],"[account, library, disableBuyItemBtn, disableFightBtn, refreshMons]",[11901,11932],"[account, library, fightTxDone, refreshMons]",[552,554],"[activate]"]